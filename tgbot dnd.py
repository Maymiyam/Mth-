import telebot
from telebot.types import CallbackQuery

api_token = '5909750312:AAHdJ9vioVLfx58WWvdHZaZ79g-bsUz6bk8'

# –∏–Ω–∏—Ü–∏–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(api_token)

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
character_data = {}
classes = ["–í–æ–∏–Ω", "–í–∞—Ä–≤–∞—Ä", "–ü–∞–ª–∞–¥–∏–Ω", "–ú–æ–Ω–∞—Ö", "–ü–ª—É—Ç", "–°–ª–µ–¥–æ–ø—ã—Ç", "–í–æ–ª—à–µ–±–Ω–∏–∫", "–ß–∞—Ä–æ–¥–µ–π", "–ö–æ–ª–¥—É–Ω", "–ë–∞—Ä–¥", "–ñ—Ä–µ—Ü", "–î—Ä—É–∏–¥", "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å"]
parameters = ['–ò–º—è', '–†–∞—Å–∞', '–ö–ª–∞—Å—Å', '–û–ø—ã—Ç', '–£—Ä–æ–≤–µ–Ω—å', '–°–∏–ª–∞', '–õ–æ–≤–∫–æ—Å—Ç—å', '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ú—É–¥—Ä–æ—Å—Ç—å', '–•–∞—Ä–∏–∑–º–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–†', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏']


def calculate_modifier(value):
    modifier = (int(value) - 10) // 2
    return modifier

# —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ c –∫–Ω–æ–ø–∫–∞–º–∏ 
@bot.message_handler(commands=['start'])
def start_message(message):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
    bot.send_message(message.chat.id,"–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É–¥–æ–±–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º D&D –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.")
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    create_hero_button = telebot.types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    play_hero_button = telebot.types.KeyboardButton('–ò–≥—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º')
    markup.add(create_hero_button, play_hero_button)
    bot.send_message(message.chat.id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)


# –í—ã–±–æ—Ä –°–û–ó–î–ê–¢–¨ –õ–ò–°–¢ –ü–ï–†–°–û–ù–ê–ñ–ê
@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')

# –≠–¢–ê–ü 1: –∏–º—è, –∫–ª–∞—Å—Å, —Ä–∞—Å–∞, –æ–ø—ã—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ 1

# –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def create_character(message):

    bot.send_message(message.chat.id, f'<b>–ù–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏ ‚úî</b> \n \n' \
                                      f'–ò–º—è —Ç–≤–æ–µ–≥–æ –∞–ª—å—Ç–µ—Ä —ç–≥–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, –Ω–æ –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –æ—Ç—ã–≥—Ä—ã—à —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –±—ã–ª –≤–æ—Å–ø–∏—Ç–∞–Ω.', parse_mode='HTML')
    bot.send_message(message.chat.id, '–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?')

    bot.register_next_step_handler(message, get_class)


# –∑–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∞
def get_class(message):
    global classes
    global character_data
    
    name = message.text
    character_data['–ò–º—è'] = name

    inline_markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    inline_markup.add(*[telebot.types.InlineKeyboardButton(c, callback_data=c) for c in classes])
    
    bot.send_message(message.chat.id, f'<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å.</b> \n \n' \
                                      f'–û—Ç –Ω–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–º–æ–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –∏ –∫–∞–∫–∏–µ —É–º–µ–Ω–∏—è –æ—Å–≤–æ–∏—Ç—å. –ö–ª–∞—Å—Å—ã —É—Å–ª–æ–≤–Ω–æ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞:\n' \
                                      f'üí™ –°–∏–ª—å–Ω—ã–µ ‚Äî –í–æ–∏–Ω, –í–∞—Ä–≤–∞—Ä;\n' \
                                      f'üí´ –ó–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–∏ ‚Äî –í–æ–ª—à–µ–±–Ω–∏–∫, –ß–∞—Ä–æ–¥–µ–π.\n' \
                                      f'–ê —Ç–∞–∫–∂–µ –∏—Ö –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–º–µ—à–µ–Ω–∏—è ‚Äî –ë–∞—Ä–¥, –ú–æ–Ω–∞—Ö, –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å –∏ –ø—Ä.', parse_mode='HTML')
    bot.send_message(message.chat.id, f'‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', reply_markup=inline_markup)
    

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def process_class_step(call):

    global character_data
    chosen_class = call.data
    character_data['–ö–ª–∞—Å—Å'] = chosen_class

    bot.reply_to(call.message, f'–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {chosen_class}')
    get_race(call.message)

@bot.message_handler(func=lambda message: True)
def get_race(message):
    bot.send_message(message.chat.id, f'<b>–°—É–ø–µ—Ä! –ê –∫–∞–∫—É—é —Ä–∞—Å—É —Ç—ã –≤—ã–±—Ä–∞–ª?</b> \n \n'
                                      f'–û—Ç —Ä–∞—Å—ã –∑–∞–≤–∏—Å—è—Ç –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª—é—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂. –¢–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏—Ç +1 –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.', parse_mode='HTML')
    bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏ —Ä–∞—Å—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</b>', parse_mode='HTML')
    bot.register_next_step_handler(message, process_race_step)

# –∑–∞–ø—Ä–æ—Å –æ–ø—ã—Ç–∞
def process_race_step(message):
    global character_data
    race = message.text
    character_data['–†–∞—Å–∞'] = race
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:')
    bot.register_next_step_handler(message, get_experience)

def get_experience(message):
    global character_data
    try:
        experience = int(message.text)
        character_data['–û–ø—ã—Ç'] = experience

        level = calculate_level(experience)
        character_data['–£—Ä–æ–≤–µ–Ω—å'] = level
        bot.send_message(message.chat.id, f'–ú—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å, –∏—Å—Ö–æ–¥—è –∏–∑ –æ–ø—ã—Ç–∞. –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ.')
        check_first_info(message)
   
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, get_experience)
    
    
def check_first_info(message):
    
    name = character_data.get('–ò–º—è')
    chosen_class = character_data.get('–ö–ª–∞—Å—Å')
    race = character_data.get('–†–∞—Å–∞')
    experience = character_data.get('–û–ø—ã—Ç')
    level = character_data.get('–£—Ä–æ–≤–µ–Ω—å')
    
    bot.send_message(message.chat.id, f'<b>–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:</b> \n \n'
                                      f'–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - {name}\n'
                                      f'–†–∞—Å–∞ - {race}\n'
                                      f'–ö–ª–∞—Å—Å - {chosen_class}\n'
                                      f'–£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {experience} –æ–ø—ã—Ç–∞ –∏ {level} —É—Ä–æ–≤–µ–Ω—å.\n \n'
                                      f'–ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º.', parse_mode='HTML')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    yes_button = telebot.types.KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ')
    no_button = telebot.types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞')
    markup.add(yes_button, no_button)

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤
    bot.register_next_step_handler_by_chat_id(message.chat.id, check_first_step)


@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ' or message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞')
def check_first_step(message):
    if message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ':
        # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ò–¥–µ–º –¥–∞–ª—å—à–µ.')
        get_strenght(message)
    elif message.text == '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞':
        # –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ (—Å –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏)
        bot.send_message(message.chat.id, '–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.')
        create_character(message)

# —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø—ã—Ç–∞
def calculate_level(experience):
    level_table = {
        0: 1, 300: 2, 900: 3, 2_700: 4, 6500: 5, 14000: 6, 23000: 7, 34000: 8, 48000: 9, 64000: 10, 85000: 11, 100000: 12,
        120000: 13, 140000: 14, 165000: 15, 195000: 16, 225000: 17, 265000: 18, 305000: 19, 355000: 20
    }

    for exp, level in level_table.items():
        if int(experience) >= int(exp):
            continue
        return level - 1
    
    return 20  # –ï—Å–ª–∏ –æ–ø—ã—Ç –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ

# –≠–¢–ê–ü 2: —Å–∏–ª–∞, –ª–æ–≤–∫–æ—Å—Ç—å, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –º—É–¥—Ä–æ—Å—Ç—å, —Ö–∞—Ä–∏–∑–º–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ 2

@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –≤–µ—Ä–Ω–æ')
def get_strenght(message):
    bot.send_message(message.chat.id, f'–ü—Ä–æ–¥–æ–ª–∂–∏–º...\n \n'
                                      f'<b>üí™ –í–≤–µ–¥–∏ —Å–∏–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>', parse_mode='HTML')
    bot.register_next_step_handler(message, get_dexterity)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–ª—ã, –∑–∞–ø—Ä–æ—Å –ª–æ–≤–∫–æ—Å—Ç–∏
def get_dexterity(message):
    global character_data
    strength = message.text
    character_data['–°–∏–ª–∞'] = strength

    bot.send_message(message.chat.id, 'ü§∏‚Äç‚ôÄ –í–≤–µ–¥–∏ –ª–æ–≤–∫–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:')
    bot.register_next_step_handler(message, get_constitution)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≤–∫–æ—Å—Ç–∏, –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
def get_constitution(message):
    global character_data
    dexterity = message.text
    character_data['–õ–æ–≤–∫–æ—Å—Ç—å'] = dexterity

    bot.send_message(message.chat.id, 'üèã –ß—Ç–æ —Å —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ–º?')
    bot.register_next_step_handler(message, get_intelligence)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è, –∑–∞–ø—Ä–æ—Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
def get_intelligence(message):
    global character_data
    constitution = message.text
    character_data['–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ'] = constitution

    bot.send_message(message.chat.id, 'üéì –ö–∞–∫–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?')
    bot.register_next_step_handler(message, get_wisdom)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∑–∞–ø—Ä–æ—Å –º—É–¥—Ä–æ—Å—Ç–∏
def get_wisdom(message):
    global character_data
    intelligence = message.text
    character_data['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç'] = intelligence

    bot.send_message(message.chat.id, 'üìö –í–≤–µ–¥–∏ –º—É–¥—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:')
    bot.register_next_step_handler(message, get_charisma)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–¥—Ä–æ—Å—Ç–∏, –∑–∞–ø—Ä–æ—Å —Ö–∞—Ä–∏–∑–º—ã
def get_charisma(message):
    global character_data
    wisdom = message.text
    character_data['–ú—É–¥—Ä–æ—Å—Ç—å'] = wisdom

    bot.send_message(message.chat.id, '–ù—É –∏, –Ω–∞–∫–æ–Ω–µ—Ü, –∫–∞–∫–∞—è —É –Ω–µ–≥–æ —Ö–∞—Ä–∏–∑–º–∞? üó£')
    bot.register_next_step_handler(message, process_charisma_step)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∏–∑–º—ã, –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
def process_charisma_step(message):
    global character_data
    charisma = message.text
    character_data['–•–∞—Ä–∏–∑–º–∞'] = charisma

    # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    bot.send_message(message.chat.id, '–û—Ö, —ç—Ç–æ –±—ã–ª–æ —Ç—è–∂–µ–ª–æ. –ù–æ –º—ã —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏–º.\n\n'
                                      '–ê –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö:')
    

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    strength = character_data['–°–∏–ª–∞']
    dexterity = character_data['–õ–æ–≤–∫–æ—Å—Ç—å']
    constitution = character_data['–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ']
    intelligence = character_data['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç']
    wisdom = character_data['–ú—É–¥—Ä–æ—Å—Ç—å']
    charisma = character_data['–•–∞—Ä–∏–∑–º–∞']

    bot.send_message(message.chat.id, f"üí™ –°–∏–ª–∞ - {strength}\n" \
                                      f"üèÉ –õ–æ–≤–∫–æ—Å—Ç—å - {dexterity}\n" \
                                      f"üèã –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ - {constitution}\n" \
                                      f"üéì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç - {intelligence}\n" \
                                      f"üìö –ú—É–¥—Ä–æ—Å—Ç—å - {wisdom}\n" \
                                      f"üó£ –•–∞—Ä–∏–∑–º–∞ - {charisma}")
    

   # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    correct_button = telebot.types.KeyboardButton('–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
    edit_button = telebot.types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    markup.add(correct_button, edit_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(message.chat.id, '‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=markup)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤
    bot.register_next_step_handler_by_chat_id(message.chat.id, check_second_step)

@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
def check_second_step(message):
    if message.text == '–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ':
        # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        bot.send_message(message.chat.id, '–°—É–ø–µ—Ä! –ü—Ä–æ–¥–æ–ª–∂–∏–º.')
        get_max_health(message)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ —Å–∏–ª—ã
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–Ω–æ–≤–∞! <b>–í–≤–µ–¥–∏ —Å–∏–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>', parse_mode='HTML')
        get_dexterity(message)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∑–∞–ø—Ä–æ—Å –º—É–¥—Ä–æ—Å—Ç–∏
def get_max_health(message):
    bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫! üíî <b>–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–† —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?</b>', parse_mode='HTML')
    bot.register_next_step_handler(message, get_speed)

def get_speed(message):
    global character_data
    max_health = message.text
    character_data['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–†'] = max_health

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:')
    bot.register_next_step_handler(message, get_armor)

def get_armor(message):
    global character_data
    speed = message.text
    character_data['–°–∫–æ—Ä–æ—Å—Ç—å'] = speed

    bot.send_message(message.chat.id, '–ê –∫–∞–∫–æ–π —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–ª–∞—Å—Å –±—Ä–æ–Ω–∏?')
    bot.register_next_step_handler(message, check_third_step)

def check_third_step(message):
    global character_data
    armor = message.text
    character_data['–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–æ–≤'] = armor

    max_health = character_data['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–†']
    speed = character_data['–°–∫–æ—Ä–æ—Å—Ç—å']
    armor = character_data['–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–æ–≤']

# –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Ññ3
    bot.send_message(message.chat.id, '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞! –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –≤—Å–µ –≤–µ—Ä–Ω–æ?')
    bot.send_message(message.chat.id, f"‚ù§Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–† - {max_health}\n" \
                                      f"üèá –°–∫–æ—Ä–æ—Å—Ç—å - {speed}\n" \
                                      f"üõ° –ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏ - {armor}")


# –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    finish_button = telebot.types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    edit_button = telebot.types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    keyboard.add(finish_button, edit_button)

    bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ. –ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=keyboard)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —à–∞–≥–æ–≤
    bot.register_next_step_handler_by_chat_id(message.chat.id, check_third_confirmation)

@bot.message_handler(func=lambda message: message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' or message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
def check_third_confirmation(message):
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞':
        # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        bot.send_message(message.chat.id, '–£—Ä–∞! –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–∫–æ–Ω—á–µ–Ω–æ.')
        display_character_data(message)

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —à–∞–≥ —Å–∏–ª—ã
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞! –í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–† –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:')
        get_max_health(message)

def display_character_data(message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è character_data
    
    name = character_data.get('–ò–º—è')
    race = character_data.get('–†–∞—Å–∞')
    chosen_class = character_data.get('–ö–ª–∞—Å—Å')
    experience = character_data.get('–û–ø—ã—Ç')
    level = character_data.get('–£—Ä–æ–≤–µ–Ω—å')
    strength = character_data.get('–°–∏–ª–∞')
    dexterity = character_data.get('–õ–æ–≤–∫–æ—Å—Ç—å')
    constitution = character_data['–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ']
    intelligence = character_data['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç']
    wisdom = character_data['–ú—É–¥—Ä–æ—Å—Ç—å']
    charisma = character_data['–•–∞—Ä–∏–∑–º–∞']
    max_health = character_data['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–†']
    speed = character_data['–°–∫–æ—Ä–æ—Å—Ç—å']
    armor = character_data['–ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–æ–≤']

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_info = f"<b>–í–æ—Ç —Ç–≤–æ–π –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n\n" \
                     f"–ò–º—è: {name}\n" \
                     f"–†–∞—Å–∞: {race}\n" \
                     f"–ö–ª–∞—Å—Å: {chosen_class}\n" \
                     f"–û–ø—ã—Ç: {experience}\n" \
                     f"–£—Ä–æ–≤–µ–Ω—å: {level}\n \n" \
                     f"üí™ –°–∏–ª–∞ - {strength} ({calculate_modifier(strength)})\n" \
                     f"üèÉ –õ–æ–≤–∫–æ—Å—Ç—å - {dexterity} ({calculate_modifier(dexterity)})\n" \
                     f"üèã –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ - {constitution} ({calculate_modifier(constitution)})\n" \
                     f"üéì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç - {intelligence} ({calculate_modifier(intelligence)})\n" \
                     f"üìö –ú—É–¥—Ä–æ—Å—Ç—å - {wisdom} ({calculate_modifier(wisdom)})\n" \
                     f"üó£ –•–∞—Ä–∏–∑–º–∞ - {charisma} ({calculate_modifier(charisma)})\n \n" \
                     f"‚ù§Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –•–† - {max_health}\n" \
                     f"üèá –°–∫–æ—Ä–æ—Å—Ç—å - {speed}\n" \
                     f"üõ° –ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏ - {armor}"


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    create_hero_button = telebot.types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    play_hero_button = telebot.types.KeyboardButton('–ò–≥—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º')
    markup.add(create_hero_button, play_hero_button)
    bot.send_message(message.chat.id, character_info, parse_mode='HTML', reply_markup=markup)
    bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n \n' \
                                      f'–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å —Å–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n \n' \
                                      f'<b><i>–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –º—É–¥—Ä–æ—Å—Ç—å –¥—Ä–∞–∫–æ–Ω–∞ –∏ —Å–∏–ª–∞ –≤–µ–ª–∏–∫–æ–≥–æ –≤–æ–∏–Ω–∞!</i></b> üê≤', parse_mode='HTML')
    bot.send_message(message.chat.id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)
    


# –≠–¢–ê–ü 3: –ò–≥—Ä–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)

#  –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
def create_another_character(message):
    # –ö–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    create_character(message)

@bot.message_handler(func=lambda message: message.text == '–ò–≥—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º')
def play_character(message):
    global classes
    if character_data:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        inline_markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        inline_markup.add(*[telebot.types.InlineKeyboardButton(p, callback_data=p) for p in parameters])
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=inline_markup)
    else:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ª–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.')
        create_character(message)

@bot.callback_query_handler(func=lambda call: True)
def edit_parameter(call):
    global character_data
    if call.data == '–û–ø—ã—Ç':
        try:
            experience = int(call.message.text)
            character_data['–û–ø—ã—Ç'] = experience

            level = calculate_level(experience)
            character_data['–£—Ä–æ–≤–µ–Ω—å'] = level
            bot.send_message(call.message.chat.id, f'–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ {level} —É—Ä–æ–≤–Ω–µ.')
            display_character_data(call.message)
   
        except ValueError:
            bot.send_message(call.message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
            bot.register_next_step_handler(call, edit_parameter)
    
    elif call.data in parameters:
        parameter = call.message.text
        bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {parameter}:')
        bot.register_next_step_handler(call, process_edit_parameter, parameter)
        
def process_edit_parameter(message, parameter):
        value = message.text
        character_data[parameter] = value
        bot.send_message(message.chat.id, f'–ü–∞—Ä–∞–º–µ—Ç—Ä {parameter} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}.')


bot.polling(none_stop=True)